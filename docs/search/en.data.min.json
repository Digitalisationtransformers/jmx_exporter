[{"id":0,"href":"/jmx_exporter/java-agent/","title":"Java Agent","parent":"JMX Exporter","content":"","description":""},{"id":1,"href":"/jmx_exporter/rules/rules/","title":"Rules","parent":"HTTP Mode Rules","content":"HTTP Mode rules that apply to both the JMX Exporter Java agent and Standalone JMX Exporter.\nName Description startDelaySeconds start delay before serving requests. Any requests within the delay period will result in an empty metrics set. lowercaseOutputName Lowercase the output metric name. Applies to default format and name. Defaults to false. lowercaseOutputLabelNames Lowercase the output metric label names. Applies to default format and labels. Defaults to false. includeObjectNames A list of ObjectNames to query. Defaults to all mBeans. excludeObjectNames A list of ObjectNames to not query. Takes precedence over includeObjectNames. Defaults to none. autoExcludeObjectNameAttributes Whether to auto exclude ObjectName attributes that can\u0026rsquo;t be converted to standard metrics types. Defaults to true. excludeObjectNameAttributes A Map of ObjectNames with a list of attribute names to exclude. ObjectNames must be in canonical form. Both ObjectNames and attribute names are matched as a Strings (no regex.) Optional. includeObjectNameAttributes A Map of ObjectNames with a list of attribute names to include. ObjectNames must be in canonical form. Both ObjectNames and attribute names are matched as a Strings (no regex.) Optional. rules A list of rules to apply in order, processing stops at the first matching rule. Attributes that aren\u0026rsquo;t matched aren\u0026rsquo;t collected. If not specified, defaults to collecting everything in the default format. pattern Regex pattern to match against each bean attribute. The pattern is not anchored. Capture groups can be used in other options. Defaults to matching everything. attrNameSnakeCase Converts the attribute name to snake case. This is seen in the names matched by the pattern and the default format. For example, anAttrName to an_attr_name. Defaults to false. name The metric name to set. Capture groups from the pattern can be used. If not specified, the default format will be used. If it evaluates to empty, processing of this attribute stops with no output. An Additional suffix may be added to this name (e.g _total for type COUNTER) value Value for the metric. Static values and capture groups from the pattern can be used. If not specified the scraped mBean value will be used. valueFactor Optional number that value (or the scraped mBean value if value is not specified) is multiplied by, mainly used to convert mBean values from milliseconds to seconds. labels A map of label name to label value pairs. Capture groups from pattern can be used in each. name must be set to use this. Empty names and values are ignored. If not specified and the default format is not being used, no labels are set. help Help text for the metric. Capture groups from pattern can be used. name must be set to use this. Defaults to the mBean attribute description, domain, and name of the attribute. cache Whether to cache bean name expressions to rule computation (match and mismatch). Not recommended for rules matching on bean value, as only the value from the first scrape will be cached and re-used. This can increase performance when collecting a lot of mbeans. Defaults to false. type The type of the metric, can be GAUGE, COUNTER or UNTYPED. name must be set to use this. Defaults to UNTYPED. Metric names and label names are sanitized. All characters other than [a-zA-Z0-9:_] are replaced with underscores, and adjacent underscores are collapsed. There\u0026rsquo;s no limitations on label values or the help text.\nA minimal config is {}, which will connect to the local JVM and collect everything in the default format. Note that the scraper always processes all mBeans, even if they\u0026rsquo;re not exported.\nNOTES\nBoth whitelistObjectNames and blacklistObjectNames are still supported for backward compatibility, but should be considered deprecated.\nPattern input The format of the input matches against the pattern is\ndomain\u0026lt;beanpropertyName1=beanPropertyValue1, beanpropertyName2=beanPropertyValue2, ...\u0026gt;\u0026lt;key1, key2, ...\u0026gt;attrName: value Part Description domain Bean name. This is the part before the colon in the JMX object name. beanPropertyName/Value Bean properties. These are the key/values after the colon in the JMX object name. keyN If composite or tabular data is encountered, the name of the attribute is added to this list. attrName The name of the attribute. For tabular data, this will be the name of the column. If attrNameSnakeCase is set, this will be converted to snake case. value The value of the attribute. No escaping or other changes are made to these values, with the exception of if attrNameSnakeCase is set. The default help includes this string, except for the value.\nDefault format The default format will transform beans in a way that should produce sane metrics in most cases. It is\ndomain_beanPropertyValue1_key1_key2_...keyN_attrName{beanpropertyName2=\u0026#34;beanPropertyValue2\u0026#34;, ...}: value If a given part isn\u0026rsquo;t set, it\u0026rsquo;ll be excluded.\nExamples The integration tests provide various configuration examples.\n/integration_test_suite/integration_tests/src/test/resources/io/prometheus/jmx/test\n","description":"HTTP Mode rules that apply to both the JMX Exporter Java agent and Standalone JMX Exporter.\nName Description startDelaySeconds start delay before serving requests. Any requests within the delay period will result in an empty metrics set. lowercaseOutputName Lowercase the output metric name. Applies to default format and name. Defaults to false. lowercaseOutputLabelNames Lowercase the output metric label names. Applies to default format and labels. Defaults to false. includeObjectNames A list of ObjectNames to query."},{"id":2,"href":"/jmx_exporter/java-agent/http-mode/","title":"HTTP Mode","parent":"Java Agent","content":"HTTP Mode collects metric when accessed via HTTP and returns them as HTTP content.\nInstallation java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=[HOSTNAME:]\u0026lt;PORT\u0026gt;:\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional if provided, must be separated from \u0026lt;PORT\u0026gt; using a colon (:) (e.g., myserver:12345) Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=12345:exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Basic YAML Configuration exporter.yaml\nrules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration Reference HTTP Mode Rules for various exporter.yaml metrics configuration options.\nMetrics Run your application. Access HTTP Mode metrics using a browser to view your metrics. http://\u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;PORT\u0026gt;/metrics # HELP my_count_total example counter # TYPE my_count_total counter my_count_total{status=\u0026#34;error\u0026#34;} 1.0 my_count_total{status=\u0026#34;ok\u0026#34;} 2.0 ","description":"HTTP Mode collects metric when accessed via HTTP and returns them as HTTP content.\nInstallation java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=[HOSTNAME:]\u0026lt;PORT\u0026gt;:\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional if provided, must be separated from \u0026lt;PORT\u0026gt; using a colon (:) (e.g., myserver:12345) Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=12345:exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Basic YAML Configuration exporter.yaml\nrules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration Reference HTTP Mode Rules for various exporter.yaml metrics configuration options.\nMetrics Run your application. Access HTTP Mode metrics using a browser to view your metrics."},{"id":3,"href":"/jmx_exporter/standalone/http-mode/","title":"HTTP Mode","parent":"Standalone","content":"HTTP Mode collects metric when accessed via HTTP and returns them as HTTP content.\nInstallation java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=[HOSTNAME:]\u0026lt;PORT\u0026gt;:\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional if provided, must be separated from \u0026lt;PORT\u0026gt; using a colon (:) (e.g., myserver:12345) Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=12345:exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Basic YAML Configuration Your application must expose RMI.\nexporter.yaml\nhostPort: \u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;APPLICATION_RMI_PORT\u0026gt; rules: - pattern: \u0026#34;.*\u0026#34; \u0026hellip; or \u0026hellip;\njmxUrl: service:jmx:rmi:///jndi/rmi://\u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;APPLICATION_RMI_PORT\u0026gt;/jmxrmi rules: - pattern: \u0026#34;.*\u0026#34; Additional RMI Configuration RMI SSL If your application\u0026rsquo;s RMI server requires SSL you can add ssl: true\nhostPort: \u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;APPLICATION_RMI_PORT\u0026gt; ssl: true rules: - pattern: \u0026#34;.*\u0026#34; RMI Username / Password If your application\u0026rsquo;s RMI server requires authentication, you can add username and password\nhostPort: \u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;APPLICATION_RMI_PORT\u0026gt; username: \u0026lt;APPLICATION_RMI_USERNAME\u0026gt; password: \u0026lt;APPLICATION_RMI_PASSWORD\u0026gt; rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration Reference HTTP Mode Rules for various exporter.yaml metrics configuration options.\nMetrics Run your application. Run the Standalone JMX Exporter application. Access HTTP Mode metrics using a browser to view your metrics. http://\u0026lt;STANDALONE_JMX_EXPORTER_HOSTNAME\u0026gt;:\u0026lt;PORT\u0026gt;/metrics # HELP my_count_total example counter # TYPE my_count_total counter my_count_total{status=\u0026#34;error\u0026#34;} 1.0 my_count_total{status=\u0026#34;ok\u0026#34;} 2.0 ","description":"HTTP Mode collects metric when accessed via HTTP and returns them as HTTP content.\nInstallation java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=[HOSTNAME:]\u0026lt;PORT\u0026gt;:\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional if provided, must be separated from \u0026lt;PORT\u0026gt; using a colon (:) (e.g., myserver:12345) Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=12345:exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Basic YAML Configuration Your application must expose RMI.\nexporter.yaml\nhostPort: \u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;APPLICATION_RMI_PORT\u0026gt; rules: - pattern: \u0026#34;.*\u0026#34; \u0026hellip; or \u0026hellip;\njmxUrl: service:jmx:rmi:///jndi/rmi://\u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;APPLICATION_RMI_PORT\u0026gt;/jmxrmi rules: - pattern: \u0026#34;.*\u0026#34; Additional RMI Configuration RMI SSL If your application\u0026rsquo;s RMI server requires SSL you can add ssl: true"},{"id":4,"href":"/jmx_exporter/standalone/","title":"Standalone","parent":"JMX Exporter","content":"","description":""},{"id":5,"href":"/jmx_exporter/rules/","title":"HTTP Mode Rules","parent":"JMX Exporter","content":"","description":""},{"id":6,"href":"/jmx_exporter/java-agent/opentelementry-mode/","title":"OpenTelemetry Mode","parent":"Java Agent","content":"OpenTelemetry Mode periodically collects metrics and pushes them to an OpenTelemetry endpoint.\nInstallation Example java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\nNo \u0026lt;HOSTNAME\u0026gt; or \u0026lt;PORT\u0026gt; is used Basic YAML Configuration exporter.yaml\nopenTelemetry: endpoint: http://prometheus:9090/api/v1/otlp protocol: http/protobuf interval: 60 rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration OpenTelemetry Mode also supports the use of OTEL environment variables.\nexporter.yaml\nopenTelemetry: # endpoint defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_ENDPOINT\u0026#34; # protocol defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_PROTOCOL\u0026#34; # interval defined via environment variable \u0026#34;OTEL_METRIC_EXPORT_INTERVAL\u0026#34; rules: - pattern: \u0026#34;.*\u0026#34; Output Run your application.\nAccess OpenTelemetry metrics using your OpenTelemetry platform.\n","description":"OpenTelemetry Mode periodically collects metrics and pushes them to an OpenTelemetry endpoint.\nInstallation Example java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\nNo \u0026lt;HOSTNAME\u0026gt; or \u0026lt;PORT\u0026gt; is used Basic YAML Configuration exporter.yaml\nopenTelemetry: endpoint: http://prometheus:9090/api/v1/otlp protocol: http/protobuf interval: 60 rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration OpenTelemetry Mode also supports the use of OTEL environment variables.\nexporter.yaml\nopenTelemetry: # endpoint defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_ENDPOINT\u0026#34; # protocol defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_PROTOCOL\u0026#34; # interval defined via environment variable \u0026#34;OTEL_METRIC_EXPORT_INTERVAL\u0026#34; rules: - pattern: \u0026#34;."},{"id":7,"href":"/jmx_exporter/standalone/opentelementry-mode/","title":"OpenTelemetry Mode","parent":"Standalone","content":"OpenTelemetry Mode periodically collects metrics and pushes them to an OpenTelemetry endpoint.\nInstallation Example -jar jmx_prometheus_standalone-\u0026lt;VERSION\u0026gt;.jar exporter.yaml Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar exporter.yaml NOTES\nNo \u0026lt;HOSTNAME\u0026gt; or \u0026lt;PORT\u0026gt; is used Basic YAML Configuration exporter.yaml\nopenTelemetry: endpoint: http://prometheus:9090/api/v1/otlp protocol: http/protobuf interval: 60 rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration OpenTelemetry Mode also supports the use of OTEL environment variables.\nexporter.yaml\nopenTelemetry: # endpoint defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_ENDPOINT\u0026#34; # protocol defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_PROTOCOL\u0026#34; # interval defined via environment variable \u0026#34;OTEL_METRIC_EXPORT_INTERVAL\u0026#34; rules: - pattern: \u0026#34;.*\u0026#34; Output Run your application. Run the Standalone JMX Exporter application.\nAccess OpenTelemetry metrics using your OpenTelemetry platform.\n","description":"OpenTelemetry Mode periodically collects metrics and pushes them to an OpenTelemetry endpoint.\nInstallation Example -jar jmx_prometheus_standalone-\u0026lt;VERSION\u0026gt;.jar exporter.yaml Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar exporter.yaml NOTES\nNo \u0026lt;HOSTNAME\u0026gt; or \u0026lt;PORT\u0026gt; is used Basic YAML Configuration exporter.yaml\nopenTelemetry: endpoint: http://prometheus:9090/api/v1/otlp protocol: http/protobuf interval: 60 rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration OpenTelemetry Mode also supports the use of OTEL environment variables.\nexporter.yaml\nopenTelemetry: # endpoint defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_ENDPOINT\u0026#34; # protocol defined via environment variable \u0026#34;OTEL_EXPORTER_OTLP_PROTOCOL\u0026#34; # interval defined via environment variable \u0026#34;OTEL_METRIC_EXPORT_INTERVAL\u0026#34; rules: - pattern: \u0026#34;."},{"id":8,"href":"/jmx_exporter/java-agent/combined-mode/","title":"Combined Mode","parent":"Java Agent","content":"Combined Mode allows for both HTTP Mode and OpenTelemetry mode metrics collections methods.\nHTTP Mode Exposes metric using an HTTP endpoint.\nmetrics are collected when the HTTP endpoint is accessed \u0026ldquo;pull\u0026rdquo; model OpenTelemtry Mode Pushes metrics to an OpenTelemetry endpoint.\nmetrics are periodically collected and pushed OpenTelemetry endpoint \u0026ldquo;push\u0026rdquo; model Installation Example java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=[HOSTNAME:]\u0026lt;PORT\u0026gt;:\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=12345:exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Basic YAML Configuration exporter.yaml\nopenTelemetry: endpoint: http://prometheus:9090/api/v1/otlp protocol: http/protobuf interval: 60 rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration Reference HTTP Mode Rules for various exporter.yaml metrics configuration options.\nMetrics Run your application. Access HTTP Mode metrics using a browser to view your metrics. http://\u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;PORT\u0026gt;/metrics # HELP my_count_total example counter # TYPE my_count_total counter my_count_total{status=\u0026#34;error\u0026#34;} 1.0 my_count_total{status=\u0026#34;ok\u0026#34;} 2.0 Access your OpenTelemetry platform to view OpenTelemetry metrics. ","description":"Combined Mode allows for both HTTP Mode and OpenTelemetry mode metrics collections methods.\nHTTP Mode Exposes metric using an HTTP endpoint.\nmetrics are collected when the HTTP endpoint is accessed \u0026ldquo;pull\u0026rdquo; model OpenTelemtry Mode Pushes metrics to an OpenTelemetry endpoint.\nmetrics are periodically collected and pushed OpenTelemetry endpoint \u0026ldquo;push\u0026rdquo; model Installation Example java -javaagent:jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar=[HOSTNAME:]\u0026lt;PORT\u0026gt;:\u0026lt;EXPORTER.YAML\u0026gt; -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional Concrete Example java -javaagent:jmx_prometheus_javaagent-1.1.0.jar=12345:exporter.yaml -jar \u0026lt;YOUR_APPLICATION.JAR\u0026gt; Basic YAML Configuration exporter."},{"id":9,"href":"/jmx_exporter/standalone/combined-mode/","title":"Combined Mode","parent":"Standalone","content":"Combined Mode allows for both HTTP Mode and OpenTelemetry mode metrics collections methods.\nHTTP Mode Exposes metric using an HTTP endpoint.\nmetrics are collected when the HTTP endpoint is accessed \u0026ldquo;pull\u0026rdquo; model OpenTelemtry Mode Pushes metrics to an OpenTelemetry endpoint.\nmetrics are periodically collected and pushed OpenTelemetry endpoint \u0026ldquo;push\u0026rdquo; model Installation Example java -jar jmx_prometheus_standalone-\u0026lt;VERSION\u0026gt;.jar [HOSTNAME:]\u0026lt;PORT\u0026gt; \u0026lt;EXPORTER.YAML\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional Concrete Example java -jar jmx_prometheus_standalone-1.1.0.jar 12345 exporter.yaml Basic YAML Configuration exporter.yaml\nopenTelemetry: endpoint: http://prometheus:9090/api/v1/otlp protocol: http/protobuf interval: 60 rules: - pattern: \u0026#34;.*\u0026#34; Advanced YAML Configuration Reference HTTP Mode Rules for various exporter.yaml metrics configuration options.\nMetrics Run your application. Access HTTP Mode metrics using a browser to view your metrics. http://\u0026lt;APPLICATION_HOSTNAME\u0026gt;:\u0026lt;PORT\u0026gt;/metrics # HELP my_count_total example counter # TYPE my_count_total counter my_count_total{status=\u0026#34;error\u0026#34;} 1.0 my_count_total{status=\u0026#34;ok\u0026#34;} 2.0 Access your OpenTelemetry platform to view OpenTelemetry metrics. ","description":"Combined Mode allows for both HTTP Mode and OpenTelemetry mode metrics collections methods.\nHTTP Mode Exposes metric using an HTTP endpoint.\nmetrics are collected when the HTTP endpoint is accessed \u0026ldquo;pull\u0026rdquo; model OpenTelemtry Mode Pushes metrics to an OpenTelemetry endpoint.\nmetrics are periodically collected and pushed OpenTelemetry endpoint \u0026ldquo;push\u0026rdquo; model Installation Example java -jar jmx_prometheus_standalone-\u0026lt;VERSION\u0026gt;.jar [HOSTNAME:]\u0026lt;PORT\u0026gt; \u0026lt;EXPORTER.YAML\u0026gt; NOTES\n\u0026lt;PORT\u0026gt; is required [HOSTNAME] is optional Concrete Example java -jar jmx_prometheus_standalone-1.1.0.jar 12345 exporter."},{"id":10,"href":"/jmx_exporter/java-agent/general-information/","title":"General Information","parent":"Java Agent","content":"The JMX Exporter Java agent jar provides access to JMX metrics running as a Java agent within your application.\nUse of the JMX Exporter Java agent is strongly encouraged due to the complex application RMI configuration required when running the Standalone JMX Exporter.\nJar File The JMX Exporter Java agent is packaged in jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar\nInstallation Installation depends on which modes you want to support:\nHTTP Mode OpenTelemetry Mode Combined Mode ","description":"The JMX Exporter Java agent jar provides access to JMX metrics running as a Java agent within your application.\nUse of the JMX Exporter Java agent is strongly encouraged due to the complex application RMI configuration required when running the Standalone JMX Exporter.\nJar File The JMX Exporter Java agent is packaged in jmx_prometheus_javaagent-\u0026lt;VERSION\u0026gt;.jar\nInstallation Installation depends on which modes you want to support:\nHTTP Mode OpenTelemetry Mode Combined Mode "},{"id":11,"href":"/jmx_exporter/standalone/general-information/","title":"General Information","parent":"Standalone","content":"The Standalone JMX Exporter jar runs as a separate application that connects to your application using RMI and collects metrics.\nUse of the JMX Exporter Java agent is strongly encouraged due to the complex application RMI configuration required when running the Standalone JMX Exporter.\nJar File The Standalone JMX Exporter is packaged in jmx_prometheus_standalone-\u0026lt;VERSION\u0026gt;.jar\nInstallation Installation depends on which modes you want to support:\nHTTP Mode OpenTelemetry Mode Combined Mode ","description":"The Standalone JMX Exporter jar runs as a separate application that connects to your application using RMI and collects metrics.\nUse of the JMX Exporter Java agent is strongly encouraged due to the complex application RMI configuration required when running the Standalone JMX Exporter.\nJar File The Standalone JMX Exporter is packaged in jmx_prometheus_standalone-\u0026lt;VERSION\u0026gt;.jar\nInstallation Installation depends on which modes you want to support:\nHTTP Mode OpenTelemetry Mode Combined Mode "},{"id":12,"href":"/jmx_exporter/","title":"JMX Exporter","parent":"","content":"This is the documentation for the Prometheus JMX Exporter version 1.1.0 and higher.\nThe main new features of the 1.1.0 release are:\nOpenTelemetry Exporter: Push metrics in OTLP format to an OpenTelemetry endpoint. Documentation and Examples\nCommunity provided example YAML configuration files:\nexamples Integration tests also provide complex and concrete examples of application and YAML configuration files:\nintegration_test_suite/integration_tests/src/test/resources/io/prometheus/jmx/test ","description":"This is the documentation for the Prometheus JMX Exporter version 1.1.0 and higher.\nThe main new features of the 1.1.0 release are:\nOpenTelemetry Exporter: Push metrics in OTLP format to an OpenTelemetry endpoint. Documentation and Examples\nCommunity provided example YAML configuration files:\nexamples Integration tests also provide complex and concrete examples of application and YAML configuration files:\nintegration_test_suite/integration_tests/src/test/resources/io/prometheus/jmx/test "},{"id":13,"href":"/jmx_exporter/tags/","title":"Tags","parent":"JMX Exporter","content":"","description":""}]